state["actorTypeInTile"] = &c_helper::actorTypeInTile;
state["addScript"] = &c_helper::createMapScript;
state["build"] = &c_helper::build;
state["calculateDistance"] = &c_helper::calculateDistance;
state["changeMap"] = &c_helper::changeMap;
state["clear"] = &c_helper::genClear; // (tile) Clears the whole genmap with a tile
state["consume"] = &c_helper::consume;
state["createActor"] = &c_helper::createActor;
state["damage"] = &c_helper::damage;
state["digRoom"] = &c_helper::genDigRoom;
state["dropItemFromInventory"] = &c_helper::dropItemFromInventory;
state["equipItem"] = &c_helper::equipItem;
state["findActorByName"] = &c_helper::findActorByName;
state["findTarget"] = &c_helper::findTarget;
state["findStaircase"] = &c_helper::findStaircase;
state["findTileByName"] = &c_helper::findTileByName; // Returns true if the tile in location has the same name as parameter
state["forgetMap"] = &c_helper::forgetMap;
state["fullscreen"] = &c_helper::toggleFullScreen; // Changes between window and fullscreen mode
state["gameOver"] = &c_helper::gameOver; // Wait for enter key and deletes game
state["genAddCellularPatch"] = &c_helper::genAddCellularPatch;
state["genCave"] = &c_helper::genCave;
state["genDungeon"] = &c_helper::genDungeon;
state["genPlaceActorSomewhere"] = &c_helper::genPlaceActorSomewhere;
state["genPlantTrees"] = &c_helper::genPlantTrees;
state["genWorld"] = &c_helper::genWorld;
state["getActorId"] = &c_helper::getActorId; // Returns the actor's id
state["getActorMapX"] = &c_helper::getActorMapX;
state["getActorMapY"] = &c_helper::getActorMapY;
state["getActorType"] = &c_helper::getActorType; // Returns the actor's type
state["getAttack"] = &c_helper::getAttack;
state["getBiome"] = &c_helper::getBiome; // Returns the biome of the selected location of the world map
state["getBlock"] = &c_helper::getBlock;
state["getConstitution"] = &c_helper::getConstitution;
state["getDefense"] = &c_helper::getDefense;
state["getDirectionToActor"] = &c_helper::getDirectionToActor;
state["getExpReward"] = &c_helper::getExpReward;
state["getHealth"] = &c_helper::getHealth;
state["getItemFromFloor"] = &c_helper::getItemFromFloor;
state["getMapHeight"] = &c_helper::getMapHeight;
state["getMapSeed"] = &c_helper::getMapSeed;
state["getMapWidth"] = &c_helper::getMapWidth;
state["getMapX"] = &c_helper::getMapX;
state["getMapY"] = &c_helper::getMapY;
state["getMapZ"] = &c_helper::getMapZ;
state["getMaxDamage"] = &c_helper::getMaxDamage;
state["getMaxHealth"] = &c_helper::getMaxHealth;
state["getMinDamage"] = &c_helper::getMinDamage;
state["getName"] = &c_helper::getName; // Returns the actor's name
state["getParry"] = &c_helper::getParry;
state["getPlayer"] = &c_helper::getPlayer; // Returns the player actor uid
state["getPlayerName"] = &c_helper::getPlayerName; // Returns the actor's name
state["getProtection"] = &c_helper::getProtection;
state["getViewRange"] = &c_helper::getViewRange;
state["give"] = &c_helper::give;   
state["god"] = &c_helper::toggleGodMode;
state["info"] = &c_helper::showMapInfo; 
state["isLocation"] = &c_helper::isLocation;
state["isObstacle"] = &c_helper::isObstacle;
state["isPlayer"] = &c_helper::isPlayer;
state["isPlayerGod"] = &c_helper::isPlayerGod;
state["isWorldMap"] = &c_helper::isWorldMap;
state["kill"] = &c_helper::kill;
state["learn"] = &c_helper::learn; // Teaches the player a skill
state["message"] = &c_helper::message;
state["openCloseDoor"] = &c_helper::openCloseDoor;
state["playAmbience"] = &c_helper::playAmbience;
state["populate"] = &c_helper::populate; // Populates map in a random tile with a "herd"
state["random"] = &c_helper::random;
state["removeItem"] = &c_helper::removeItem;   
state["resetMap"] = c_helper::resetMap;
state["restoreHealth"] = &c_helper::restoreHealth;
state["runEvent"] = &c_game::runEvent;
state["saveMap"] = &c_helper::saveMap; // Saves the map in a .TCODZip file
state["setAmbience"] = &c_helper::setAmbience;
state["setAttributes"] = &c_helper::setAttributes;
state["setColor"] = &c_helper::setColor; // Sets a color in the color matrix
state["setFloor1"] = &c_helper::setGenFloor1;
state["setFloor2"] = &c_helper::setGenFloor2;
state["setFloor3"] = &c_helper::setGenFloor3;
state["setWall1"] = &c_helper::setGenWall1;
state["setWall2"] = &c_helper::setGenWall2;
state["setWall3"] = &c_helper::setGenWall3;
state["showActorPosition"] = &c_helper::showActorPosition; // Shows actor's coordinates in the game console
state["showPlayerPosition"] = &c_helper::showPlayerPosition; // Shows player's coordinates in the game console
state["startAction"] = &c_helper::startAction;
state["storeMap"] = &c_helper::storeMap; // Stores the map in a human-readable file
state["talk"] = &c_helper::talk; // Opens a talk window in the interface with several dialogue options
state["teleportActor"] = &c_helper::teleportActor;
state["test"] = &c_helper::test;
state["updateGamelog"] = &c_helper::updateGamelog;
state["updateWorld"] = &c_helper::updateWorld; // Updates world map from map 0.0.0 stored locally
state["worldMap"] = &c_helper::worldMap; // Loads the world map
state["stainTileWithBlood"] = &c_helper::stainTileWithBlood;
state["dropLoot"] = &c_helper::dropLoot;
state["dropLoot"] = &c_helper::dropLoot;
state["los"] = &c_helper::los;